/**
 *
 *
 *      {{ properCase componentName }}
 *
 *
 */

{{#ifEquals renderingStyle 'SSR'}}
import type { GetServerSideProps, NextPage } from 'next';
{{else}}
import type { GetStaticProps, NextPage } from 'next';
{{/ifEquals}}
import React from 'react';
import Head from 'next/head';
{{#if wantTranslation}}
import { useTranslation } from 'next-i18next';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';
{{/if}}
{{#if wantStyles}}
import styles from 'styles/{{ properCase componentName }}.module.css';
{{/if}}
{{#if wantAForm}}
import { yupResolver } from '@hookform/resolvers/yup';
import { SubmitHandler, useForm, FormProvider } from 'react-hook-form';
import { Schema } from 'config/yupSchemas/{{properCase componentName}}Schema';
{{/if}}

const {{ properCase componentName }}: NextPage = () => {
  {{#if wantTranslation}}
  const { t } = useTranslation('common');
  {{/if}}
  {{#if wantAForm}}
  const [isLoading, setIsLoading] = React.useState<boolean>(false);
  {{/if}}

  {{#if wantAForm}}
  // change the type from any to the type of the form body
  // for more information check the docs at https://react-hook-form.com/
  const formMethods = useForm<any>({
    resolver: yupResolver(Schema),
  });

  const { 
    formState: { errors },
    register, 
    handleSubmit,
  } = formMethods;

  // change the type from any to the type of the form body
  const onSubmit: SubmitHandler<any> = async (d) => {
    setIsLoading(true);
    try {
      {{#if usingAnInsideApiRoute}}
      const resp = await fetch('{{getApiName apiName}}', {
      {{else}}
      const resp = await fetch('', {
      {{/if}}
        method: 'POST',
        body: JSON.stringify({
          // form body example: name: d.name
        }),
      });
    } catch (e) {
      console.log(e);
    }
  };
  {{/if}}
  return (
    <>
      <Head>
        <meta name="title" content="{{ titleCase componentName }}" />
        <meta name="description" content="{{ titleCase componentName }}" />
        <title>{{ titleCase componentName }}</title>
      </Head>
      {{#if wantAForm}}
      {/* to use this form in a child component use useFormContext */}
      <FormProvider {...formMethods}>
        {{#if wantStyles}}
        <main className={styles.main}>
        {{else}}
        <main>
        {{/if}}
          {{#if wantTranslation}}
          {t('')}
          {{/if}}
          <h1>{{ titleCase componentName }}</h1>
          {/* usage example */}
          <form onSubmit={handleSubmit(onSubmit)}>
            <input {...register('name')} />
            {errors.name && (
              <p className='px-2 pb-2 text-error'>{errors.name.message}</p>
            )}
          </form>
        </main>
      </FormProvider>
      {{else}}
      {{#if wantStyles}}
      <main className={styles.main}>
      {{else}}
      <main>
      {{/if}}
        {{#if wantTranslation}}
        {t('')}
        {{/if}}
        <h1>{{ titleCase componentName }}</h1>
      </main>
      {{/if}}
    </>
  );
};

export default {{ properCase componentName }};


{{#ifEquals renderingStyle 'SSR'}}
{{#if wantTranslation}}
export const getServerSideProps: GetServerSideProps = async ({ locale }) => {
{{else}}
export const getServerSideProps: GetServerSideProps = async () => {
{{/if}}
  return {
    {{#if wantTranslation}}
      /* 'common' is the default json translation file, if you want to 
      change it create a new json file in the public/locales/en folder 
      and add it here and in the useTranslation hook above.
      for more information check the docs at https://github.com/i18next/next-i18next#readme */
    props: {
      ...(await serverSideTranslations(locale as string, ['common'])),
    },
    {{else}}
    props: {},
    {{/if}}
  };
};
{{else}}
{{#if wantTranslation}}
export const getStaticProps: GetStaticProps = async ({ locale }) => {
{{else}}
export const getStaticProps: GetStaticProps = async () => {
{{/if}}
  return {
    {{#if wantTranslation}}
      /* 'common' is the default json translation file, if you want to 
      change it create a new json file in the public/locales/en folder 
      and add it here and in the useTranslation hook above.
      for more information check the docs at https://github.com/i18next/next-i18next#readme */
    props: {
      ...(await serverSideTranslations(locale as string, ['common'])),
    },
    {{else}}
    props: {},
    {{/if}}
  };
};
{{/ifEquals}}